## Custom Values for our EKS
## Default file located https://github.com/DataDog/helm-charts/blob/main/charts/datadog/values.yaml
## Use this file as reference in TF Helm Resource


datadog:
  # apiKeyExistingSecret: datadog-keys
  # We are using the FEDRAMP Datadog for Government Site. 
  # See more about Datadog Sites https://docs.datadoghq.com/getting_started/site/
  # Using my lab for testing at commercial site
  # site: ddog-gov.com
  site: datadoghq.com


# proxy:
  # Put https: "http://proxy.something.something.gov:port"
  # Put http: "http://proxy.something.something.gov:port"

  # This is true in default. Do we need it here? 
  ## Enable apm agent and provide custom configs
  # APM is enabled by default. 
  # If local service Internal Traffic Policy is allowed (Kubernetes v1.22+), the agent service is created with the APM local traceport.
  # datadog.apm.socketEnabled -- Enable APM over Socket (Unix Socket or windows named pipe)
  apm:
    portEnabled: true



  ## datadog.serviceMonitoring.enabled -- Enable Universal Service Monitoring
  serviceMonitoring:
    enabled: false

  ## Enable logs agent and provide custom configs
  # datadog.logs.enabled -- Enables this to activate Datadog Agent log collection
  logs:
    enabled: false
    containerCollectAll: false
    autoMultiLineDetection: false


  # datadog.hostVolumeMountPropagation -- Allow to specify the `mountPropagation` value on all volumeMounts using HostPath
  ## ref: https://kubernetes.io/docs/concepts/storage/volumes/#mount-propagation
  hostVolumeMountPropagation: HostToContainer

  # This was true in Default..do we need it here?
  # datadog.leaderElection -- Enables leader election mechanism for event collection
  leaderElection: true


  ## Enable process agent and provide custom configs
  # datadog.processAgent.enabled -- Set this to true to enable live process monitoring agent
  # datadog.processAgent.processCollection -- Set this to true to enable process collection in process monitoring agent
  processAgent:
    processCollection: true
  
  
  ## ref: https://docs.datadoghq.com/agent/kubernetes/dogstatsd/
  # To emit custom metrics from your Kubernetes application, use DogStatsD.
  # datadog.dogstatsd.port -- Override the Agent DogStatsD port
  dogstatsd:
    # datadog.dogstatsd.useHostPort -- Sets the hostPort to the same value of the container port
    ## Needs to be used for sending custom metrics.
    ## The ports need to be available on all hosts.
    ## WARNING: Make sure that hosts using this are properly firewalled otherwise
    ## metrics and traces are accepted from any host able to connect to this host.
    ## datadog.dogstatsd.port -- Override the Agent DogStatsD port
    ## Note: Make sure your client is sending to the same UDP port.
    port: 8125
    useHostPort: true
       
    # datadog.dogstatsd.nonLocalTraffic -- Enable this to make each node accept non-local statsd traffic (from outside of the pod)
    ## ref: https://github.com/DataDog/docker-dd-agent#environment-variables
    nonLocalTraffic: true
    
    # datadog.systemProbe.enableTCPQueueLength -- Enable the TCP queue length eBPF-based check
    enableTCPQueueLength: true

    ## Enable systemProbe agent and provide custom configs
    # datadog.systemProbe.enableOOMKill -- Enable the OOM kill eBPF-based check
    systemProbe:
      enableOOMKill: true
  

  ## datadog.kubeStateMetricsEnabled -- If true, deploys the kube-state-metrics deployment
  ## ref: https://github.com/kubernetes/kube-state-metrics/tree/kube-state-metrics-helm-chart-2.13.2/charts/kube-state-metrics
  # The kubeStateMetricsEnabled option will be removed in the 4.0 version of the Datadog Agent chart.
  kubeStateMetricsEnabled: false
  ## datadog.kubeStateMetricsCore.enabled -- Enable the kubernetes_state_core check in the Cluster Agent (Requires Cluster Agent 1.12.0+)
  ## ref: https://docs.datadoghq.com/integrations/kubernetes_state_core
  kubeStateMetricsCore:
    enabled: true
  
    # datadog.kubeStateMetricsCore.labelsAsTags -- Extra labels to collect from resources and to turn into datadog tag.

    ## It has the following structure:
     labelsAsTags:
    ##   <resource1>:        # can be pod, deployment, node, etc.
         lysettekuberneteslabel: skate_tags_manual_yamlfileentry  # where <label1> is the kubernetes label and <tag1> is the datadog tag
    ##     <label2>: <tag2>
    ##   <resource2>:
    ##     <label3>: <tag3>
    ##
    labelsAsTags: {}
      pod:
        app: manual_labelastags_yamlfileentry
    #  node:
    #    zone: zone
    #    team: team

    # datadog.kubeStateMetricsCore.annotationsAsTags -- Extra annotations to collect from resources and to turn into datadog tag.



  
  ## kubelet configuration
  # datadog.kubelet.host -- Override kubelet IP
  kubelet:
    # datadog.kubelet.tlsVerify -- Toggle kubelet TLS verification
    # @default -- true
    tlsVerify: false
  
  
  ## datadog.networkMonitoring.enabled -- Enable network performance monitoring
  networkMonitoring:
    enabled: true
  # I'm not sure what this is unless it's some sort of Tagging,  Chris Leffler from DD provided
  # This settings file that I'm customizing but this was one of his settings. Let me know if 
  # I should ask him what this is about if cloud team is not aware.
    env:
    - name: DD_EC2_PREFER_IMDSV2
      value: "true"
    - name: DD_INVENTORIES_CONFIGURATION_ENABLED
      value: "true"


## This is the Datadog Cluster Agent implementation that handles cluster-wide
## metrics more cleanly, separates concerns for better rbac, and implements
## the external metrics API so you can autoscale HPAs based on datadog metrics
## ref: https://docs.datadoghq.com/agent/kubernetes/cluster/
# clusterAgent.enabled -- Set this to false to disable Datadog Cluster Agent
clusterAgent:
  # clusterAgent.admissionController.enabled -- Enable the admissionController to be able to inject APM/Dogstatsd config and standard tags (env, service, version) automatically into your pods
  admissionController:
    enabled: true
    # clusterAgent.admissionController.mutateUnlabelled -- Enable injecting config without having the pod label 'admission.datadoghq.com/enabled="true". See -- https://docs.datadoghq.com/containers/cluster_agent/admission_controller/?tab=helm'
    mutateUnlabelled: false
  

# Enable the metricsProvider to be able to scale based on metrics in Datadog
  metricsProvider:
    # clusterAgent.metricsProvider.enabled -- Set this to true to enable Metrics Provider
    enabled: true  
  
  
  ## Each key becomes a file in /conf.d
  ## ref: https://github.com/DataDog/datadog-agent/tree/main/Dockerfiles/agent#optional-volumes
  ## ref: https://docs.datadoghq.com/agent/autodiscovery/
  ## DD does not require Prometheus to run, but can ingest Prometheus metrics.
  confd:
    kube_apiserver_metrics.yaml: |-
      cluster_check: true
      init_config:
      instances:
        - prometheus_url: https://kubernetes.default/metrics
          ssl_ca_cert: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          bearer_token_auth: true
    kube_controller_manager.yaml: |-
      cluster_check: true
      init_config:
      instances:
        - prometheus_url: https://kubernetes.default/metrics
          ssl_ca_cert: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          bearer_token_auth: true


# agents.enabled -- You should keep Datadog DaemonSet enabled!
  ## The exceptional case could be a situation when you need to run
  ## single Datadog pod per every namespace, but you do not need to
  ## re-create a DaemonSet for every non-default namespace install.
  ## Note: StatsD and DogStatsD work over UDP, so you may not
  ## get guaranteed delivery of the metrics in Datadog-per-namespace setup!
# agents.useConfigMap -- Configures a configmap to provide the agent configuration. Use this in combination with the `agents.customAgentConfig` parameter.
agents:
  useConfigMap: true
# agents.customAgentConfig -- Specify custom contents for the datadog agent config (datadog.yaml)
  ## ref: https://docs.datadoghq.com/agent/guide/agent-configuration-files/?tab=agentv6
  ## ref: https://github.com/DataDog/datadog-agent/blob/main/pkg/config/config_template.yaml
  ## Note the `agents.useConfigMap` needs to be set to `true` for this parameter to be taken into account.
  customAgentConfig:
    #  fips is used to enable the fips sidecar container for GOVCLOUD environments.
    #  FIPS provides encryption. This is mandatory for ATO
    fips:
      enabled: true
      use_https: false